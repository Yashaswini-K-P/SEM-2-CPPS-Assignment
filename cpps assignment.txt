1. Write a C program to Display a number’s multiplication table.
#include <stdio.h>

int main() {
    int n;
    printf("Enter the number for multiplication table: ");
    scanf("%d", &n);
    for(int i=1; i<=10; i++){
        printf("%d X %d = %d\n", n, i, n*i);
    }

    return 0;
}

output:
Enter the number for multiplication table: 5
5 X 1 = 5
5 X 2 = 10
5 X 3 = 15
5 X 4 = 20
5 X 5 = 25
5 X 6 = 30
5 X 7 = 35
5 X 8 = 40
5 X 9 = 45
5 X 10 = 50


2. Develop a C program to implement the pattern using nested loops (pyramid using 
numbers).
#include<stdio.h>
int main(){
    int n;
    printf("Enter the number of rows in a pyramid: ");
    scanf("%d", &n);
    for(int i=0; i<n; i++){
        for(int k=0; k<=n-i-1; k++){
            printf(" ");
        }
        for(int j=0; j<=i; j++){
            printf("%d ", i+1);
        }
        printf("\n");
    }
    return 0;
}

Output:
Enter the number of rows in a pyramid: 5
     1 
    2 2 
   3 3 3 
  4 4 4 4 
 5 5 5 5 5 

3. Write a C program to Merge two arrays.

#include <stdio.h>

int main() {
    int m, n;
    printf("Enter the size of arr1: ");
    scanf("%d", &m);
    printf("Enter the size of arr2: ");
    scanf("%d", &n);
    int arr1[m+n], arr2[n];
    printf("Enter the elements of arr1: ");
    for(int i=0; i<m; i++){
        scanf("%d", &arr1[i]);
    }
    printf("Enter the elements of arr2: ");
    for(int i=0; i<n; i++){
        scanf("%d", &arr2[i]);
    }
    for(int i=0; i<n; i++){
        arr1[m+i]=arr2[i];
    }
    printf("Merged arr elements are:");
    for(int i=0; i<m+n; i++){
        printf("%d ", arr1[i]);
    }
    return 0;
}

Output:
Enter the size of arr1: 2
Enter the size of arr2: 5
Enter the elements of arr1: 1 2
Enter the elements of arr2: 4 5 6 7 8 
Merged arr elements are:1 2 4 5 6 7 8 


4. Explain the process of bubble sort with example and write the suitable code snippet. 
Constraints: 
• The input array can have up to 1000 elements. 
• The array elements are integers in the range [-10⁶, 10⁶]. 
• Your implementation should optimize the algorithm by stopping early if no swaps 
occur in a pass 
INPUT: arr = {5, 3, 8, 4, 2}   
OUT PUT: Sorted array: {2, 3, 4, 5, 8} 


Bubble Sort is a simple comparison-based sorting algorithm.
It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.
Over time, the largest values "bubble up" to the end of the array — hence the name "Bubble" Sort.

Steps:
* Start from the first element.

* Compare the current element with the next one.

* If the current element is greater, swap them.

*Repeat this for all elements in the array

*By Repeating this process for the remaining elements, we will get the correct positions of the elements at last.

*If no swaps are made in a cycle, the array is already sorted — you can stop early.

Cycle 1:
5 > 3 → swap → {3, 5, 8, 4, 2}

5 < 8 → no swap

8 > 4 → swap → {3, 5, 4, 8, 2}

8 > 2 → swap → {3, 5, 4, 2, 8}

Cycle 2:
3 < 5 → no swap

5 > 4 → swap → {3, 4, 5, 2, 8}

5 > 2 → swap → {3, 4, 2, 5, 8}

Cycle 3:
3 < 4 → no swap

4 > 2 → swap → {3, 2, 4, 5, 8}


Cycle 4:
3 > 2 → swap → {2, 3, 4, 5, 8}

Cycle 5:
No swaps — array is sorted.

#include <stdio.h>

void bubbleSort(int arr[], int n) {
    int temp, swapped;

    for (int i = 0; i < n - 1; i++) {
        swapped = 0;

        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                swapped = 1;
            }
        }

        if (swapped == 0)
            break;
    }
}

int main() {
    int arr[1000], n;

    printf("Enter the number of elements : ");
    scanf("%d", &n);

    if (n <= 0 || n > 1000) {
        printf("Invalid size! Please enter a number between 1 and \n");
        return 1;
    }

    printf("Enter %d  elements\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    bubbleSort(arr, n);

    printf("Sorted array: {");
    for (int i = 0; i < n; i++) {
        printf("%d", arr[i]);
        if (i < n - 1) printf(", ");
    }
    printf("}\n");

    return 0;
}

Output:
Enter the number of elements : 5
Enter 5  elements
1 2 3 5 4 
Sorted array: {1, 2, 3, 4, 5}


=== Code Execution Successful ===


5. Problem Statement: Write a C program to perform a binary search on a sorted array. 
The program should take an integer array and a target value as input, and return the 
index of the target value if found, or -1 if the target is not present in the array.  
INPUT: arr = {1, 3, 5, 7, 9, 11, 13, 15}     target = 7 
OUTPUT: Target found at index: 3



#include <stdio.h>

int main() {
    int n;
    printf("Enter the number of elements in an array: ");
    scanf("%d", &n);
    int arr[n], start=0, end=n-1, mid, found=0, tar;
    printf("Enter the array elements: ");
    for(int i=0; i<n; i++){
        scanf("%d", &arr[i]);
    }
    printf("Enter the target: ");
    scanf("%d", &tar);
    while(start<=end){
        mid=(start+end)/2;
        if(arr[mid]==tar){
            found=1;
            break;
        }else if(arr[mid]<tar){
            start=mid+1;
        } else{
            end=mid-1;
        }
    }
    if(found){
        printf("Target found at index %d", mid);
    }else{
        printf("Not Found");
    }
    return 0;
}

Output:
Enter the number of elements in an array: 5
Enter the array elements: 5 7 8 9 16
Enter the target: 9
Target found at index 3


6. Write a C program to Count vowels and consonants in a string. 
Constraints: 
• The input string will contain only alphabets (A-Z, a-z) and spaces. 
• The program should correctly handle an empty string. 


#include <stdio.h>
#include <string.h>

int main() {
    char str[100];
    int vowels = 0, consonants = 0, i;

    printf("Enter a string: ");
    fgets(str, sizeof(str), stdin);
    

    for (i = 0; str[i] != '\0'; i++) {
        char ch = str[i];
        if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')) {
            if (ch == 'a' || ch == 'e' || ch == 'i' ||
                ch == 'o' || ch == 'u' || ch == 'A' ||
                ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')
                vowels++;
            else
                consonants++;
        }
    }

    printf("Vowels: %d\n", vowels);
    printf("Consonants: %d\n", consonants);

    return 0;
}


Output:
Enter a string: Dayananda    Sagar University
Vowels: 10
Consonants: 14

7. Write a C program that takes a 2D matrix as input and computes its transpose. The 
transpose of a matrix is obtained by swapping rows and columns.                                    
Constraints: 
The input matrix can have a maximum size of 100 x 100. 
The program should handle square and rectangular matrices. 
The input matrix should be integer values.

#include<stdio.h>
int main(){
    int m, n;
    printf("Enter number of rows: ");
    scanf("%d", &m);
    printf("Enter number of columns: ");
    scanf("%d", &n);
    int arr[m][n], trans[n][m];
    printf("Enter the elements in the matrix: ");
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            scanf("%d", &arr[i][j]);
            trans[j][i]=arr[i][j];
        }
    }
    printf("Original Matrix:\n");
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
    printf("\nTransposed matrix:\n");
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            printf("%d ", trans[i][j]);
        }
        printf("\n");
    }
    return 0;
}

Output:
Enter number of rows: 3
Enter number of columns: 2
Enter the elements in the matrix: 1 2 3 4 5 6
Original Matrix:
1 2 
3 4 
5 6 

Transposed matrix:
1 3 5 
2 4 6 


8. Write a C program using recursion to compute the nth Fibonacci number using 
functions. The Fibonacci sequence is defined as: 
F(n)=F(n−1) +F(n−2) 

#include<stdio.h>
int F(int n){
    if(n<=1){
        return n;
    }
    return F(n-1)+F(n-2);
}
int main(){
    int n;
    printf("Enter the position: ");
    scanf("%d", &n);
    printf("%dth Fibonacci number is %d", n, F(n));
    return 0;
}

Output:
Enter the position: 5
5th Fibonacci number is 5


9. Write a C program to determine the length of a given string without using the built
in strlen() function. Instead, use pointer arithmetic to traverse the string and count 
the number of characters and display the array elements using pointers. 

#include<stdio.h>
int main(){
    char str[100];
    int len=0;
    printf("Enter the string:");
    scanf("%s", str);
    char *ptr =str;
    while(*ptr!='\0'){
        len++;
        ptr++;
    }
    printf("Length of the give string is: %d", len);
    return 0;
}

Output:
Enter the string:Engineering
Length of the give string is: 11

10. Design and implement a C program using a structure (struct) to manage student 
records, including adding, displaying, updating, and searching student 
information. 


#include <stdio.h>
#include <string.h>

// Structure to hold student data
struct Student {
    int roll;
    char name[50];
    float marks;
};

int main() {
    struct Student student[50];
    int count = 0;
    int choice, i, RSearch;

    while (1) {
        printf("\n--- Student Record Menu ---\n");
        printf("1. Add Student\n");
        printf("2. Display Students\n");
        printf("3. Search Student by Roll Number\n");
        printf("4. Update Student by Roll Number\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            if (count >= 50) {
                printf("Student limit exceeded\n");
                continue;
            }

            printf("Enter roll number: ");
            scanf("%d", &student[count].roll);

            printf("Enter name : ");
            scanf("%s", student[count].name);


            printf("Enter marks: ");
            scanf("%f", &student[count].marks);

            count++;
            printf("Student added successfully!\n");

        } else if (choice == 2) {
            printf("\n--- Student List ---\n");
            for (i = 0; i < count; i++) {
                printf("Roll: %d | Name: %s | Marks: %.2f\n",
                       student[i].roll, student[i].name, student[i].marks);
            }

        } else if (choice == 3) {
            printf("Enter roll number to search: ");
            scanf("%d", &RSearch);
            int found = 0;
            for (i = 0; i < count; i++) {
                if (student[i].roll == RSearch) {
                    printf("Found: Roll: %d | Name: %s | Marks: %.2f\n",
                           student[i].roll, student[i].name, student[i].marks);
                    found = 1;
                    break;
                }
            }
            if (!found) {
                printf("Student not found.\n");
            }

        } else if (choice == 4) {
            printf("Enter roll number to update: ");
            scanf("%d", &RSearch);
            int found = 0;
            for (i = 0; i < count; i++) {
                if (student[i].roll == RSearch) {
                    printf("Enter new name : ");
                    scanf("%s", student[count].name);


                    printf("Enter new marks: ");
                    scanf("%f", &student[i].marks);

                    printf("Student record updated!\n");
                    found = 1;
                    break;
                }
            }
            if (!found) {
                printf("Student not found.\n");
            }

        } else if (choice == 5) {
            printf("Exiting....!\n");
            break;

        } else {
            printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}


11. Write a Difference between structure and union (with example).

==Structure==
*Definition: A structure is a user-defined data type in C that stores a collection of different (heterogeneous) types of data.

*Memory Allocation: Memory is allocated separately for each member.

*Simultaneous Access: All members can hold and access values at the same time.

*Usage: Used when you want to store and manage multiple fields of an entity like student records (e.g., name, age, CGPA, etc.).

*Syntax & Access: Accessed using the dot (.) operator — s1.age, s1.cgpa.

Example:
struct Student {
    int age;
    float cgpa;
};

struct Student s1;
s1.age = 20;
s1.cgpa = 8.5;
printf("Age: %d\n", s1.age);
printf("CGPA: %.2f\n", s1.cgpa);


==Union==
*Definition: A union is a user-defined data type similar to a structure, but with one key difference.

*Memory Allocation: All members share the same memory — enough to hold the largest member only.

*Simultaneous Access: Only one member can contain a valid value at a time.

*Usage: Useful when you need to store different data types, but only one value is used at a time, which saves memory.

Example:
union Data {
    int i;
    float f;
};

union Data d1;
d1.i = 10;
d1.f = 5.5;  // Overwrites d1.i
printf("f: %.2f\n", d1.f);
printf("i: %d\n", d1.i);  // May print garbage


12. Implement a digital clock in C (console-based).

#include <stdio.h>
#include <time.h>  
#include <windows.h> 

int main() {
    while(1) {
        time_t raw_time;
        struct tm *time_info;

        time(&raw_time);            
        time_info = localtime(&raw_time); 

        printf("Digital Clock\n");
        printf("%02d:%02d:%02d\n",
            time_info->tm_hour,
            time_info->tm_min,
            time_info->tm_sec);

        Sleep(1000); 
    }

    return 0;
}


13.  Create a simple banking system with deposit/withdrawal/account balance features.

#include <stdio.h>

float balance = 0.0;

void checkBalance() {
    printf("Current Balance: %.2f\n", balance);
}

void deposit() {
    float amount;
    printf("Enter amount to deposit: ");
    scanf("%f", &amount);
    if (amount > 0) {
        balance += amount;
        printf("%.2f deposited successfully.\n", amount);
    } else {
        printf("Invalid amount. Please enter a positive value.\n");
    }
}

void withdraw() {
    float amount;
    printf("Enter amount to withdraw: ");
    scanf("%f", &amount);
    if (amount > 0 && amount <= balance) {
        balance -= amount;
        printf("%.2f withdrawn successfully.\n", amount);
    } else if (amount > balance) {
        printf("Insufficient balance!\n");
    } else {
        printf("Invalid amount. Please enter a positive value.\n");
    }
}

int main() {
    int choice;

    do {
        printf("\n====== Banking System ======\n");
        printf("1. Check Balance\n");
        printf("2. Deposit Money\n");
        printf("3. Withdraw Money\n");
        printf("4. Exit\n");
        printf("Choose an option (1-4): ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                checkBalance();
                break;
            case 2:
                deposit();
                break;
            case 3:
                withdraw();
                break;
            case 4:
                printf("Exiting....");
                break;
            default:
                printf("Invalid choice. Please choose between 1-4.");
        }
    } while(choice != 4);

    return 0;
}

Output
====== Banking System ======
1. Check Balance
2. Deposit Money
3. Withdraw Money
4. Exit
Choose an option (1-4): 2
Enter amount to deposit: 200
200.00 deposited successfully.

====== Banking System ======
1. Check Balance
2. Deposit Money
3. Withdraw Money
4. Exit
Choose an option (1-4): 1
Current Balance: 200.00

====== Banking System ======
1. Check Balance
2. Deposit Money
3. Withdraw Money
4. Exit
Choose an option (1-4): 4
Exiting....


14. Write a C program to create a simple Tic-Tac-Toe game.

#include <stdio.h>
char board[3][3];  
char currentPlayer = 'X';

void initializeBoard() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            board[i][j] = ' ';
}

void printBoard() {
    printf("\n");
    for (int i = 0; i < 3; i++) {
        printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);
        if (i < 2)
            printf("---|---|---\n");
    }
    printf("\n");
}


int checkWinner() {
    for (int i = 0; i < 3; i++) {
        // Check rows
        if (board[i][0] == currentPlayer &&
            board[i][1] == currentPlayer &&
            board[i][2] == currentPlayer)
            return 1;
        // Check columns
        if (board[0][i] == currentPlayer &&
            board[1][i] == currentPlayer &&
            board[2][i] == currentPlayer)
            return 1;
    }
    // Check diagonals
    if (board[0][0] == currentPlayer &&
        board[1][1] == currentPlayer &&
        board[2][2] == currentPlayer)
        return 1;

    if (board[0][2] == currentPlayer &&
        board[1][1] == currentPlayer &&
        board[2][0] == currentPlayer)
        return 1;

    return 0;
}


int isDraw() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ')
                return 0;  
    return 1;  
}


void switchPlayer() {
    if (currentPlayer == 'X')
        currentPlayer = 'O';
    else
        currentPlayer = 'X';
}

int main() {
    int row, col;
    initializeBoard();

    printf("Tic-Tac-Toe Game (2 Players)\n");
    printBoard();

    while (1) {
        printf("Player %c, enter row and column (0-2): ", currentPlayer);
        scanf("%d %d", &row, &col);

        if (row < 0 || row > 2 || col < 0 || col > 2) {
            printf("Invalid input! Try again.\n");
            continue;
        }

        if (board[row][col] != ' ') {
            printf("Cell already taken! Try another.\n");
            continue;
        }

        
        board[row][col] = currentPlayer;
        printBoard();

        if (checkWinner()) {
            printf("Player %c wins!\n", currentPlayer);
            break;
        }

        if (isDraw()) {
            printf("It's a draw!\n");
            break;
        }
        switchPlayer();
    }

    return 0;
}


15.  Implement the game of Snake in C (console-based).


#include <stdio.h>
#include <conio.h>
#include <windows.h>
#include <stdlib.h>
#define WIDTH 20
#define HEIGHT 20

int x, y, foodX, foodY, score;
int gameOver;
int tailX[100], tailY[100];
int nTail = 0;
enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };
enum Direction dir;

void setup() {
    gameOver = 0;
    dir = STOP;
    x = WIDTH / 2;
    y = HEIGHT / 2;
    foodX = rand() % WIDTH;
    foodY = rand() % HEIGHT;
    score = 0;
}

void draw() {
    system("cls"); 

    for (int i = 0; i < WIDTH + 2; i++) printf("#");
    printf("\n");

    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            if (j == 0) printf("#");

            if (i == y && j == x)
                printf("O"); // snake head
            else if (i == foodY && j == foodX)
                printf("@"); // food
            else {
                int printTail = 0;
                for (int k = 0; k < nTail; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        printf("o");
                        printTail = 1;
                    }
                }
                if (!printTail) printf(" ");
            }

            if (j == WIDTH - 1) printf("#");
        }
        printf("\n");
    }

    for (int i = 0; i < WIDTH + 2; i++) printf("#");
    printf("\n");

    printf("Score: %d\n", score);
}

void input() {
    if (_kbhit()) {
        switch (_getch()) {
            case 'a':
                dir = LEFT;
                break;
            case 'd':
                dir = RIGHT;
                break;
            case 'w':
                dir = UP;
                break;
            case 's':
                dir = DOWN;
                break;
            case 'x':
                gameOver = 1;
                break;
        }
    }
}

void logic() {
    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;

    tailX[0] = x;
    tailY[0] = y;

    for (int i = 1; i < nTail; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    switch (dir) {
        case LEFT:
            x--;
            break;
        case RIGHT:
            x++;
            break;
        case UP:
            y--;
            break;
        case DOWN:
            y++;
            break;
    }

    // Collision with wall
    if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT)
        gameOver = 1;

    // Collision with tail
    for (int i = 0; i < nTail; i++)
        if (tailX[i] == x && tailY[i] == y)
            gameOver = 1;

    if (x == foodX && y == foodY) {
        score += 10;
        foodX = rand() % WIDTH;
        foodY = rand() % HEIGHT;
        nTail++;
    }
}

int main() {
    setup();
    while (!gameOver) {
        draw();
        input();
        logic();
        Sleep(100); // slow down the loop
    }
    printf("Game Over! Final Score: %d\n", score);
    return 0;
}
